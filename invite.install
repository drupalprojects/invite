<?php

/**
 * Install the initial schema.
 */
function invite_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("
        CREATE TABLE {invite} (
          email varchar(64) NOT NULL default '',
          reg_code varchar(64) NOT NULL default '',
          uid int(10) unsigned NOT NULL default '0',
          mid int(11) unsigned NOT NULL default '0',
          expiry int(11) NOT NULL default '0',
          timestamp int(11) NOT NULL default '0',
          received tinyint(3) unsigned NOT NULL default '0',
          message text NOT NULL,
          PRIMARY KEY  (email),
          UNIQUE (reg_code),
          KEY (uid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;"
      );
      break;

    case 'pgsql':
      db_query("
        CREATE TABLE {invite} (
          email VARCHAR(64) NOT NULL DEFAULT '',
          reg_code VARCHAR(64) NOT NULL DEFAULT '',
          uid INTEGER NOT NULL DEFAULT 0,
          mid INTEGER NOT NULL DEFAULT 0,
          expiry INTEGER NOT NULL DEFAULT 0,
          timestamp INTEGER NOT NULL DEFAULT 0,
          received SMALLINT NOT NULL DEFAULT 0,
          message TEXT NOT NULL DEFAULT '',
          PRIMARY KEY (email),
          UNIQUE (reg_code)
        );"
      );
      db_query("CREATE INDEX {invite}_uid_idx ON {invite} (uid)");
      break;
  }
}

function invite_update_1() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {invite} CHANGE reg_code reg_code VARCHAR(64) UNIQUE NOT NULL");
      $ret[] = update_sql("ALTER TABLE {invite} ADD INDEX reg_code_idx (reg_code)");
      break;
  }
  return $ret;
}

/**
 * Drop duplicate index on reg_code. Add index for uid.
 */
function invite_update_2() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {invite} DROP INDEX reg_code_idx");
      $ret[] = update_sql("ALTER TABLE {invite} ADD INDEX (uid)");
      break;
    case 'pgsql':
      $ret[] = update_sql("DROP INDEX reg_code_idx");
      $ret[] = update_sql("CREATE INDEX {invite}_uid_idx ON {invite} (uid)");
      break;
  }
  return $ret;
}

/**
 * Clean up invites originating from deleted users.
 */
function invite_update_3() {
  // Collect orphaned invites
  $result = db_query("SELECT DISTINCT i.uid FROM {invite} i LEFT JOIN {users} u ON i.uid = u.uid WHERE u.uid IS NULL");
  $num = db_num_rows($result);
  $sql = "DELETE FROM {invite} WHERE uid = %d";
  if (!variable_get('invite_allow_join_delete', 0)) {
    $sql .= " AND timestamp != 0";
  }
  while ($inviter = db_fetch_object($result)) {
    db_query($sql, $inviter->uid);
  }
  if ($num) {
    drupal_set_message(strtr('%num orphaned invites have been deleted.', array('%num' => $num)));
  }
  return array();
}

/**
 * Add notification after an invited user registers.
 */
function invite_update_4() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {invite} CHANGE received received tinyint(3) unsigned NOT NULL default '0'");
      break;
    case 'pgsql':
      db_change_column($ret, 'invite', 'received', 'received', 'SMALLINT', array('not null' => TRUE));
      break;
  }
  // Prevent displaying a whole bunch of messages for old invites
  $ret[] = update_sql("UPDATE {invite} SET received = 1 WHERE mid != 0");
  return $ret;
}

/**
 * Save invite message text.
 */
function invite_update_5() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {invite} ADD COLUMN message TEXT NOT NULL default ''");
      break;
    case 'pgsql':
      db_add_column($ret, 'invite', 'message', 'TEXT', array('not null' => TRUE, 'default' => "''"));
      break;
  }
  return $ret;
}

/**
 * Clean up invitations of deleted users.
 */
function invite_update_6() {
  if (variable_get('invite_allow_join_delete', 0)) {
    // Collect orphaned invites
    $result = db_query("SELECT i.mid FROM {invite} i LEFT JOIN {users} u ON i.mid = u.uid WHERE u.uid IS NULL");
    $num = db_num_rows($result);
    while ($invitee = db_fetch_object($result)) {
      db_query("DELETE FROM {invite} WHERE mid = %d", $invitee->mid);
    }
    if ($num) {
      drupal_set_message(strtr('%num orphaned invites have been deleted.', array('%num' => $num)));
    }
  }
  return array();
}

